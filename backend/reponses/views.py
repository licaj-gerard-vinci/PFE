from django.http import Http404
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from backend.models import Admin, ReponseClient, Verifications, Reponses, Clients, Engagements
from django.shortcuts import get_object_or_404


# Create your views here.

class AddVerificationView(APIView):
    def post(self, request, client_id):
        '''
        Cr√©e des v√©rifications pour toutes les r√©ponses d'un client sp√©cifi√©.
        :param client_id: L'ID du client pour lequel les v√©rifications doivent √™tre cr√©√©es
        :param request: La requ√™te HTTP
        :return: Un message de succ√®s ou d'erreur

        Exemple de route:
        POST /verifications/1/add/

        Exemple de corps de requ√™te:
        {
            "id_admin": 1
        }

        Exemple de r√©ponse:
        {
            "message": "V√©rifications cr√©√©es pour toutes les r√©ponses du client 1."
        }

        '''

        # R√©cup√©rer les donn√©es de la requ√™te
        admin_id = request.data['id_admin']  # Assurez-vous que l'utilisateur connect√© est un admin
        try:

            # V√©rifiez si l'utilisateur est bien un admin
            admin = get_object_or_404(Admin, id_admin=admin_id)

            # R√©cup√©rez toutes les r√©ponses du client sp√©cifi√©
            reponses_clients = ReponseClient.objects.filter(id_client=client_id)
            if not reponses_clients.exists():
                return Response({"error": "Aucune r√©ponse trouv√©e pour ce client."}, status=status.HTTP_404_NOT_FOUND)
            # Cr√©er les v√©rifications pour chaque r√©ponse du client
            for reponse_client in reponses_clients:
                Verifications.objects.create(
                    id_reponse_client=reponse_client,
                    est_valide=False,  # Par d√©faut non valid√©
                    id_admin=admin
                )

            return Response(
                {"message": f"V√©rifications cr√©√©es pour toutes les r√©ponses du client {client_id}."},
                status=status.HTTP_201_CREATED
            )
        except Http404:
            return Response({"error": "Admin non trouv√©."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


class ValidateQuestionView(APIView):
    def post(self, request, verification_id):
        '''
        Valide une v√©rification sp√©cifique.
        :param verification_id: L'ID de la v√©rification √† valider
        :param request: La requ√™te HTTP
        :return: Un message de succ√®s ou d'erreur
        '''
        # R√©cup√©rer l'ID de l'admin depuis la requ√™te
        admin_id = request.data.get('id_admin')

        # Validation de l'ID de l'admin
        if not admin_id:
            return Response({"error": "L'ID de l'admin est requis."}, status=status.HTTP_400_BAD_REQUEST)

        try:
            # V√©rifiez que l'admin existe
            admin = get_object_or_404(Admin, id_admin=admin_id)
        except Http404:
            return Response({"error": "Admin non trouv√©."}, status=status.HTTP_404_NOT_FOUND)

        try:
            # R√©cup√©rer la v√©rification sp√©cifique
            verification = get_object_or_404(Verifications, id_reponse_client=verification_id)

            # Valider la v√©rification
            verification.est_valide = True
            verification.save()

            # Retourner un succ√®s
            return Response(
                {"message": f"V√©rification {verification_id} valid√©e avec succ√®s."},
                status=status.HTTP_200_OK
            )

        except Http404:
            return Response({"error": "V√©rification non trouv√©e."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({"error": f"Erreur inattendue : {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)


class GetVerificationsView(APIView):
    def get(self, request, client_id):
        '''
        R√©cup√®re toutes les v√©rifications pour un client sp√©cifi√©.
        :param client_id: L'ID du client pour lequel les v√©rifications doivent √™tre r√©cup√©r√©es
        :return: Les v√©rifications pour le client sp√©cifi√©

        Exemple de route:
        GET /verifications/client/1/

        Exemple de r√©ponse:
        [
            {
                "id_verification": 1,
                "id_reponse_client": 1,
                "est_valide": False,
                "id_admin": 1
            },
            {
                "id_verification": 2,
                "id_reponse_client": 2,
                "est_valide": False,
                "id_admin": 1
            }
        ]
        '''

        try:
            # R√©cup√©rer toutes les v√©rifications pour le client sp√©cifi√©
            reponses_clients = ReponseClient.objects.filter(id_client=client_id)
            if not reponses_clients.exists():
                return Response({"error": "Aucune r√©ponse trouv√©e pour ce client."}, status=status.HTTP_404_NOT_FOUND)
            verifications = Verifications.objects.filter(id_reponse_client__in=reponses_clients)
            if not verifications.exists():
                return Response({"error": "Aucune v√©rification trouv√©e pour ce client."},
                                status=status.HTTP_404_NOT_FOUND)
            # R√©cup√©rer les donn√©es de chaque v√©rification
            data = []
            for verification in verifications:
                data.append({
                    "id_verification": verification.id_reponse_client.id_reponse_client,
                    "id_reponse_client": verification.id_reponse_client.id_reponse_client,
                    "est_valide": verification.est_valide,
                    "id_admin": verification.id_admin.id_admin
                })

            return Response(data, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)


#todo: √† retester
class DeleteReponseClientView(APIView):
    def delete(self, request, reponse_client_id):
        '''
        Supprime une r√©ponse client et sa v√©rification associ√©e si la question de la r√©ponse client a au moins une autre r√©ponse.
        :param reponse_client_id: L'ID de la r√©ponse client √† supprimer.
        :param request: La requ√™te HTTP.
        :return: Un message de succ√®s ou d'erreur.
        '''
        try:
            # R√©cup√©rer la r√©ponse client sp√©cifique
            reponse_client = get_object_or_404(ReponseClient, id_reponse_client=reponse_client_id)
            print(f"üõ†Ô∏è Suppression de la r√©ponse client {reponse_client_id}.")
            # R√©cup√©rer la question associ√©e via la relation
            question = reponse_client.id_reponse.id_question
            print(f"üõ†Ô∏è Question associ√©e : {question}")
            # R√©cup√©rer toutes les r√©ponses client pour cette question
            reponses_clients = ReponseClient.objects.filter(id_reponse__id_question=question.id_question)
            print(f"üõ†Ô∏è R√©ponses clients trouv√©es : {reponses_clients}")

            # V√©rifier si la question a plus d'une r√©ponse
            if reponses_clients.count() > 1:
                # Supprimer la r√©ponse client
                verification = Verifications.objects.filter(id_reponse_client=reponse_client_id).first()
                print(f"üõ†Ô∏è V√©rification associ√©e : {verification}")
                if verification:
                    verification.delete()
                    print(f"üõ†Ô∏è V√©rification associ√©e supprim√©e avec succ√®s.")

                reponse_client.delete()
                print(f"üõ†Ô∏è R√©ponse client {reponse_client_id} supprim√©e avec succ√®s.")

                # Supprimer la v√©rification associ√©e, si elle existe


                # Retourner un succ√®s
                return Response(
                    {"message": f"R√©ponse client {reponse_client_id} supprim√©e avec succ√®s."},
                    status=status.HTTP_200_OK
                )
            else:
                return Response(
                    {"error": "Impossible de supprimer la r√©ponse car la question n'a qu'une seule r√©ponse."},
                    status=status.HTTP_400_BAD_REQUEST)

        except Http404:
            return Response({"error": "R√©ponse client non trouv√©e."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({"error": f"Erreur inattendue : {str(e)}"}, status=status.HTTP_412_PRECONDITION_FAILED)

class UpdateReponseClientView(APIView):
    def put(self, request, reponse_client_id):
        '''
        Modifie le contenu d'une r√©ponse client si le champ libre est activ√©.
        :param reponse_client_id: L'ID de la r√©ponse client √† modifier.
        :param request: La requ√™te HTTP.
        :return: Un message de succ√®s ou d'erreur.

        Exemple de route:
        PUT /reponse_client/1/update/
        Exemple de corps de requ√™te:
        {
            "contenu": "Nouveau contenu de la r√©ponse",
            "score_final": 10
        }

        Exemple de r√©ponse:
        {
            "message": "R√©ponse client 1 modifi√©e avec succ√®s."
        }

        '''

        try:
            # V√©rifier si le contenu et le score_final sont pr√©sents dans la requ√™te
            if  'score_final' not in request.data:
                return Response({"error": "Le contenu et le score final sont requis."},
                                status=status.HTTP_400_BAD_REQUEST)
            # R√©cup√©rer la r√©ponse client sp√©cifique
            reponse_client = get_object_or_404(ReponseClient, id_reponse_client=reponse_client_id)

            reponse = Reponses.objects.get(id_reponse=reponse_client.id_reponse.id_reponse)
            # V√©rifier si le champ libre est activ√©
            if reponse.champ_libre:
                # Modifier le contenu de la r√©ponse client
                if 'contenu' in request.data:
                    reponse.texte = request.data.get('contenu')

                # Modifier le score final de la r√©ponse client
                reponse_client.score_final = request.data.get('score_final')

                reponse.save()
                reponse_client.save()

                print(f"üõ†Ô∏è R√©ponse client {reponse_client_id} modifi√©e avec succ√®s.")
                print(f"üõ†Ô∏è Nouveau contenu de la r√©ponse : {reponse.texte}")
                print(f"üõ†Ô∏è Nouveau score final de la r√©ponse : {reponse_client.score_final}")

                # Retourner un succ√®s
                return Response(
                    {"message": f"R√©ponse client {reponse_client_id} modifi√©e avec succ√®s."},
                    status=status.HTTP_200_OK
                )
            else:
                return Response({"error": "Impossible de modifier la r√©ponse car le champ libre n'est pas activ√©."},
                                status=status.HTTP_412_PRECONDITION_FAILED)

        except Http404:
            return Response({"error": "R√©ponse client non trouv√©e."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({"error": f"Erreur inattendue : {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)


class AddReponseClientView(APIView):
    def post(self, request):
        """
            Cr√©e une r√©ponse client si elle n'existe pas.
            :param request: La requ√™te HTTP.
            :return: Un message de succ√®s ou d'erreur.

            Exemple de route:
            POST /reponse_client/reponse_verifier/add
            Exemple de corps de requ√™te:
            {
                "id_reponse": 1,
                "id_client": 1,
                "est_engagement": false,
                "id_admin": 1,
            }

            Exemple de r√©ponse:
            {
                "message": "R√©ponse client cr√©√©e avec succ√®s."
            }
        """
        try:
            # V√©rifier si l'id de la r√©ponse, l'id du client, l'est_engagement et l'id de l'admin sont pr√©sents dans la requ√™te
            if 'id_reponse' not in request.data or 'id_client' not in request.data or 'est_engagement' not in request.data or 'id_admin' not in request.data:
                return Response(
                    {"error": "L'ID de la r√©ponse, l'ID du client, l'engagement et l'ID de l'admin sont requis."},
                    status=status.HTTP_400_BAD_REQUEST)

            try:
                # V√©rifiez que l'admin existe
                admin = get_object_or_404(Admin, id_admin=request.data['id_admin'])
            except Http404:
                return Response({"error": "Admin non trouv√©."}, status=status.HTTP_404_NOT_FOUND)
            # R√©cup√©rer la r√©ponse sp√©cifique
            reponse_client = ReponseClient.objects.filter(id_reponse=request.data['id_reponse'],
                                                          id_client=request.data['id_client'])
            if reponse_client.exists():
                return Response({"error": "La r√©ponse client existe d√©j√†."}, status=status.HTTP_412_PRECONDITION_FAILED)

            reponse = get_object_or_404(Reponses, id_reponse=request.data['id_reponse'])

            client = get_object_or_404(Clients, id_client=request.data['id_client'])  # Retrieve the Clients instance

            # Cr√©er la r√©ponse client
            reponse_client = ReponseClient.objects.create(
                id_reponse=reponse,
                id_client=client,  # Assign the Clients instance
                est_un_engagement=request.data['est_engagement'],
                score_final=1080
            )

            # Cr√©er la v√©rification associ√©e
            Verifications.objects.create(
                id_reponse_client=reponse_client,
                est_valide=True,
                id_admin=admin
            )

            # R√©cup√©rer la r√©ponse client sp√©cifique
            reponse_client = ReponseClient.objects.get(id_reponse=reponse, id_client=client)
            # Modifier le score final de la r√©ponse client

            if reponse_client.est_un_engagement:
                reponse_client.score_final = reponse.score_engagement
            else:
                reponse_client.score_final = reponse.score_individuel

            reponse_client.save()

            # Retourner un succ√®s
            return Response(
                {"message": "R√©ponse client cr√©√©e avec succ√®s."},
                status=status.HTTP_201_CREATED
            )

        except Http404:
            return Response({"error": "R√©ponse non trouv√©e."}, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({"error": f"Erreur inattendue : {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)


class GetEngagementsView(APIView):
    def get(self, request, client_id):
        '''
        R√©cup√®re tous les engagements pour un client sp√©cifi√©.
        :param client_id: L'ID du client pour lequel les engagements doivent √™tre r√©cup√©r√©s.
        :return: Une liste des engagements pour le client sp√©cifi√©.

        Exemple de route:
        GET /engagements/client/1/

        Exemple de r√©ponse:
        [
            {
                "id_engagement": 1,
                "id_enjeu": 1,
                "engagement": "Engagement 1",
                "commentaire": "Commentaire 1",
                "kpis": "KPI 1",
                "date": "2024-01-01"
            },
            {
                "id_engagement": 2,
                "id_enjeu": 2,
                "engagement": "Engagement 2",
                "commentaire": "Commentaire 2",
                "kpis": "KPI 2",
                "date": "2024-01-02"
            }
        ]
        '''
        try:
            print(f"üõ†Ô∏è V√©rification des engagements pour le client {client_id}.")

            # V√©rifier les v√©rifications du client
            if not self.are_all_verifications_valid(client_id):
                print("‚ùå Toutes les v√©rifications ne sont pas valides pour ce client.")
                return Response({
                    "error": "Impossible de r√©cup√©rer les engagements car toutes les v√©rifications ne sont pas valides pour ce client."
                }, status=status.HTTP_412_PRECONDITION_FAILED)

            print("‚úÖ Toutes les v√©rifications sont valides pour ce client.")

            # R√©cup√©rer les engagements
            engagements = Engagements.objects.filter(
                id_engagement__in=ReponseClient.objects.filter(id_client=client_id, est_un_engagement=True).values_list(
                    'id_reponse__id_engagement', flat=True)
            )
            print(f"Engagements trouv√©s : {engagements}")

            if not engagements.exists():
                print(f"‚ö†Ô∏è Aucun engagement trouv√© pour le client {client_id}.")
                return Response({"error": "Aucun engagement trouv√© pour ce client."}, status=status.HTTP_404_NOT_FOUND)

            # Construire la liste des engagements
            engagements_list = []
            for engagement in engagements:
                engagement_data = {
                    "id_engagement": engagement.id_engagement,
                    "id_enjeu": engagement.id_enjeu.id_enjeu if engagement.id_enjeu else None,
                    "engagement": engagement.engagement,
                    "commentaire": engagement.commentaire,
                    "kpis": engagement.kpis,
                    "date": engagement.date
                }
                engagements_list.append(engagement_data)
                print(f"Engagement ajout√© : {engagement_data}")

            return Response(engagements_list, status=status.HTTP_200_OK)

        except Exception as e:
            print(f"Erreur inattendue : {e}")
            return Response({"error": f"Erreur inattendue : {str(e)}"}, status=status.HTTP_400_BAD_REQUEST)

    ##############################################
    @staticmethod
    def are_all_verifications_valid(client_id):
        """
        V√©rifie si toutes les v√©rifications d'un client sont valides.
        :param client_id: L'ID du client
        :return: True si toutes les v√©rifications sont valides, False sinon
        """
        try:
            # R√©cup√©rer toutes les r√©ponses clients pour le client donn√©
            reponses_clients = ReponseClient.objects.filter(id_client=client_id)
            if not reponses_clients.exists():
                print(f"Aucune r√©ponse trouv√©e pour le client {client_id}.")
                return False

            # R√©cup√©rer toutes les v√©rifications li√©es aux r√©ponses clients
            verifications = Verifications.objects.filter(id_reponse_client__in=reponses_clients)
            if not verifications.exists():
                print(f"Aucune v√©rification trouv√©e pour le client {client_id}.")
                return False

            # V√©rifier si toutes les v√©rifications sont valides
            all_valid = verifications.filter(est_valide=False).count() == 0
            return all_valid

        except Exception as e:
            print(f"Erreur inattendue dans are_all_verifications_valid : {e}")
            return False